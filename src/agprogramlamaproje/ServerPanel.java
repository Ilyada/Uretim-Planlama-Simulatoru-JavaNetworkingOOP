/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package agprogramlamaproje;

import java.net.Socket;

/**
 *
 * @author student
 */
public class ServerPanel extends javax.swing.JFrame  implements FrameBehavior{
    static SynchronizedBuffer  sharedLocation = new SynchronizedBuffer();
    static Handleis handleis ;
 
    /* Creates new form ServerPanel
     */
    public ServerPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMesajlar = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPort = new javax.swing.JTextPane();
        btnServerStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setText("Port");

        txtMesajlar.setColumns(20);
        txtMesajlar.setRows(5);
        jScrollPane1.setViewportView(txtMesajlar);

        txtPort.setText("5005");
        txtPort.setName("txtPort"); // NOI18N
        jScrollPane2.setViewportView(txtPort);

        btnServerStart.setText("Start Server");
        btnServerStart.setName("btnStartServer"); // NOI18N
        btnServerStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServerStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnServerStart)))
                .addContainerGap(212, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnServerStart))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnServerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServerStartActionPerformed
        ServerListener newHosting = new ServerListener("5005",this);
        
        ServerListenerPlanlamaci newHostingPlanlamaci = new ServerListenerPlanlamaci("5000" ,this);
        newHostingPlanlamaci.start();
        newHosting.start();
        btnServerStart.setEnabled(false);
        printResult("Server Started");

        handleis = new Handleis(sharedLocation);
        //Handledone handledone =new Handledone();
        handleis.start();
        handleis.run();
      //  handledone.start();
    
    }//GEN-LAST:event_btnServerStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerPanel().setVisible(true);
            }
        });
    }
    
    //Kodlayacağımız lojiğimiz burada olacak. 
    @Override
    public void makeActionMakine(String msg, Makine sender) {
       String mParsed[] = msg.split("&");
       
       // init makine..
        if(mParsed.length == 10){
            if(mParsed[0].equals("AD"))
            {
                sender.ad = mParsed[1];
            }
            if(mParsed[2].equals("ID"))
            {
                sender.id = Integer.parseInt(mParsed[3]);
            }
            if(mParsed[4].equals("TUR"))
            {
                sender.tur = mParsed[5];
            }
            if(mParsed[6].equals("HIZ"))
            {
                sender.hiz = Integer.parseInt(mParsed[7]);
            }
              if(mParsed[8].equals("DURUM"))
            {
                sender.durum = mParsed[9];
            }
              
            sender.myOutputMessages.add(""+sender.ad+" isimli Makinenin Bağlantısı Gerçekleşti..");   
            printResult("Yeni Makine Baglantisi Gerçekleştirildi.. \n"+msg);
            repaint();  
          //  makineekle(clientMakine,myFrm);
          
             // if(Info.isler.size()>0 && Info.makineler.size()>0){
               //   if(handleis.getState() == Thread.State.WAITING)
            //    sharedLocation.canWrite.signal();
               // handleis.start();
                      handleis = new Handleis(sharedLocation);
                      handleis.start();
              //}
          
        }
             


         
   
    }
    
    
        @Override
    public void makeActionPlanlamaci(String msg, Planlamaci sender) {
              String mParsed[] = msg.split("&");

       if(mParsed[0].equals("kullanicigirisi"))
            {
                    kullanicigirisi(msg,sender);
            }
       
           if(mParsed[0].equalsIgnoreCase("isekle"))
            {
                    isekle(msg,sender);
                    printResult("Yeni Bir İs Eklendi.. \n"+msg);
                   // handleis.run();
                      handleis = new Handleis(sharedLocation);
                      handleis.start();

            }
           
               if(mParsed[0].equalsIgnoreCase("makinedurumgoster"))
            {
                    makinedurumu(msg,sender);
                    printResult(mParsed[1]+"ID'li Makine Durumu analiz ediliyor \n"+msg);

            }
                if(mParsed[0].equalsIgnoreCase("yapilanislerListele"))
            {
                    yapilanislerListele(msg,sender);
                    printResult(mParsed[1]+"ID'li Makinenin yaptığı isler analiz ediliyor \n"+msg);

            }
       
         
         if(msg.equalsIgnoreCase("makineturlistele")){
             sender.myOutputMessages.add("Türler...\n");
             printResult("Türler Listeleniyor..");
             makinelistele(sender);
         }
         
        
              if(msg.equalsIgnoreCase("isListele"))
            {
                
                    isListele(sender);
                    printResult("Mevcut İsler Listeleniyor \n");

            }
             
             
            

    }
    
     public void yapilanislerListele(String msg,Planlamaci sender){
         String mParsed[] = msg.split("&");
         String s ="";
                  int makineid;
                 makineid=Integer.parseInt(mParsed[1]);
         if(Info.makineler.size()>0){
                  for(Makine m:Info.makineler){
                      if(m.getId() == makineid){
                         // System.out.println("DENEME21"+m.id+"   "+m.yapilanisler.size());

                          for(Isler yapilanis:m.yapilanisler){
                              
                              s +=" "+yapilanis.getId();
                              //System.out.println("DENEME");
                          }
                      }
                  }
         }
     sender.myOutputMessages.add(mParsed[1]+" ID'li Makinenin Yaptığı İslerin ID'leri:"+s);

         
     }
    public void makinedurumu(String msg,Planlamaci sender){
                  String mParsed[] = msg.split("&");
                  int makineid;
                 makineid=Integer.parseInt(mParsed[1]);
                  if(Info.makineler.size()>0){
                  for(Makine m:Info.makineler){
                      if(m.getId() == makineid){
                          sender.myOutputMessages.add(mParsed[1]+" ID'li Makinenin Durumu: "+m.getDurum());
                      }
                  }
                  } 
                  else{
                    sender.myOutputMessages.add("Mevcut Makine Bulunmamaktadır.\n");
                    }
                  
             
        
    }


    public void isekle(String msg,Planlamaci sender) {
          String mParsed[] = msg.split("&");

           int isid=0;
            String isturu=null;
            int uzunluk=0;
            
            
             if(mParsed[1].equals("ID"))
             {
                 isid=Integer.parseInt(mParsed[2]);
             }
              if(mParsed[3].equals("TUR"))
                {
                 isturu=mParsed[4];
                }
              if(mParsed[5].equals("UZUNLUK"))
                {
                 uzunluk=Integer.parseInt(mParsed[6]);
                }
              Isler yeniis=new Isler(isid,isturu,uzunluk,false);
              yeniis.done=false;
              yeniis.onprocess=false;
              Info.isler.add(yeniis);
          
              sender.myOutputMessages.add("\nYeni is eklendi..\n");
              
    }
    
    public void kullanicigirisi(String msg,Planlamaci sender){
                  String mParsed[] = msg.split("&");
           String kadi = null,sifre = null;
            
             if(mParsed[1].equals("KADI"))
            {
                 kadi=mParsed[2];
            }
              if(mParsed[3].equals("SIFRE"))
            {
                 sifre=mParsed[4];
            }
              
              if(kadi.equalsIgnoreCase("Berdil") && "123456".equals(sifre)){
                  
                  sender.myOutputMessages.add("OK");
                  printResult("Berdil Adlı Personel Sisteme Giris Yaptı..");

              }
              else if(kadi.equalsIgnoreCase("Mehmet") && "12345".equals(sifre)){
                  
                  sender.myOutputMessages.add("OK");
                  printResult("Mehmet Adlı Personel Sisteme Giris Yaptı..");
              }
              else sender.myOutputMessages.add("Hatalı Giris");
    }
    
    public void makinelistele(Planlamaci sender){
        String CNCmakineler="",Kaplamamakineler="";
        if(Info.makineler.size()>0){
        for(Makine m:Info.makineler){
           if( m.getTur().equalsIgnoreCase("CNC") ){
               
               CNCmakineler += m.ad+" ";   
               
            }
           if( m.getTur().equalsIgnoreCase("kaplama") ){
               
               Kaplamamakineler += m.ad+" ";
                  
            } 
        }
                sender.myOutputMessages.add("CNC Makineler: "+CNCmakineler+"\nKaplama Makineleri: "+Kaplamamakineler );
        }
        else{
                    sender.myOutputMessages.add("Mevcut Makine Bulunmamaktadır.\n");
        }
    }
    
    public void isListele(Planlamaci sender){

        String CNCisleri="",Kaplamaisleri="";
        int count =1;
        String done="";
        if(Info.isler.size()>0){
         for(Isler m:Info.isler){
            if( m.getTur().equalsIgnoreCase("CNC") ){
                if(m.onprocess) done="(Yapıldı)";
                else  done="(Yapılmadı)";
             CNCisleri += "\nis ID'si:" + m.id + done;   
             count++;
            }
              if( m.getTur().equalsIgnoreCase("kaplama") ){
               if(m.onprocess) done="(Yapıldı)";
                else  done="(Yapılmadı)";
               Kaplamaisleri += "\nİs ID'si:"+m.id + done;
                  
            } 
         }
         sender.myOutputMessages.add("Mevcut İsler..\n"+"CNC isleri: "+CNCisleri+"\nKaplama İsleri: "+Kaplamaisleri);
        }
        else 
            sender.myOutputMessages.add("Mevcut İs Bulunmamaktadir..\n");

    }
    
     public void printResult(String msg){
         txtMesajlar.append(""+msg+"\n");
      //  txtMesajlar.setText(txtMesajlar.getText() + "\n"  + msg);
    }
     

     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnServerStart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea txtMesajlar;
    private javax.swing.JTextPane txtPort;
    // End of variables declaration//GEN-END:variables








}
